using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Animation;

namespace Magma
{

    // Custom animation class for animating grid row & column sizes
    // GENERATED BY GPT-4o
    public class GridLengthAnimation : AnimationTimeline
    {
        public override Type TargetPropertyType => typeof(GridLength);

        public static readonly DependencyProperty FromProperty = DependencyProperty.Register("From", typeof(GridLength), typeof(GridLengthAnimation));
        public static readonly DependencyProperty ToProperty = DependencyProperty.Register("To", typeof(GridLength), typeof(GridLengthAnimation));
        public static readonly DependencyProperty EasingFunctionProperty = DependencyProperty.Register("EasingFunction", typeof(IEasingFunction), typeof(GridLengthAnimation));

        public GridLength From
        {
            get => (GridLength)GetValue(FromProperty);
            set => SetValue(FromProperty, value);
        }

        public GridLength To
        {
            get => (GridLength)GetValue(ToProperty);
            set => SetValue(ToProperty, value);
        }

        public IEasingFunction EasingFunction
        {
            get => (IEasingFunction)GetValue(EasingFunctionProperty);
            set => SetValue(EasingFunctionProperty, value);
        }

        public override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock)
        {
            double fromVal = From.Value;
            double toVal = To.Value;

            double progress = animationClock.CurrentProgress.Value;

            if (EasingFunction != null)
            {
                progress = EasingFunction.Ease(progress);
            }

            double newValue = fromVal + (toVal - fromVal) * progress;

            return new GridLength(newValue, GridUnitType.Star);
        }

        protected override Freezable CreateInstanceCore()
        {
            return new GridLengthAnimation();
        }
    }

    public static class EzAnimate
    {
        // This function just simplifies the process of actually playing an animation
        private static void DoAnimation(AnimationTimeline animation, DependencyObject target, object property, EventHandler onFinish = null)
        {
            var sb = new Storyboard();

            sb.Children.Add(animation);

            if (onFinish != null)
                sb.Completed += onFinish;

            Storyboard.SetTargetProperty(animation, new PropertyPath(property));
            Storyboard.SetTarget(animation, target);
            sb.Begin();
        }

        public static void ResizeGridColumn(in ColumnDefinition column_target, GridLength newSize, double duration = 400, EventHandler onFinish = null)
        {
            GridLengthAnimation ResizeGridColumnAnimation = new GridLengthAnimation
            {
                From = column_target.Width,
                To = newSize,
                Duration = new Duration(TimeSpan.FromMilliseconds(duration)),
                EasingFunction = new QuadraticEase()
                {
                    EasingMode = EasingMode.EaseInOut
                }
            };

            DoAnimation(ResizeGridColumnAnimation, column_target, ColumnDefinition.WidthProperty, onFinish);
        }

        public static void ResizeMargins(in FrameworkElement target, Thickness newMargin, double duration = 400, EventHandler onFinish = null)
        {
            var ResizeMarginsAnimation = new ThicknessAnimation()
            {
                From = target.Margin,
                To = newMargin,
                Duration = new Duration(TimeSpan.FromMilliseconds(duration)),
                EasingFunction = new QuadraticEase()
                {
                    EasingMode = EasingMode.EaseInOut
                }
            };

            DoAnimation(ResizeMarginsAnimation, target, FrameworkElement.MarginProperty, onFinish);
        }

        // This method is mostly just used to resize our FluidContainer control
        public static void ResizeX(in FrameworkElement target, double newWidth, double duration = 400, EventHandler onFinish = null)
        {
            var ResizeAnimation = new DoubleAnimation()
            {
                From = target.ActualWidth,
                To = newWidth,
                Duration = new Duration(TimeSpan.FromMilliseconds(duration)),
                EasingFunction = new QuadraticEase()
                {
                    EasingMode = EasingMode.EaseInOut
                }
            };

            DoAnimation(ResizeAnimation, target, FrameworkElement.WidthProperty, onFinish);
        }

        // Self explanatory, fades an object to a specified "newOpacity". (Called from "FadeOut" and "FadeIn")
        public static void FadeOpacity(in FrameworkElement target, double newOpacity, double duration = 280, EventHandler onFinish = null)
        {
            var FadeAnimation = new DoubleAnimation()
            {
                From = target.Opacity,
                To = newOpacity,
                Duration = new Duration(TimeSpan.FromMilliseconds(duration * (1 - target.Opacity))),
                EasingFunction = new QuadraticEase()
                {
                    EasingMode = EasingMode.EaseInOut
                }
            };

            DoAnimation(FadeAnimation, target, FrameworkElement.OpacityProperty, onFinish);
        }

        // Used for fading controls into view
        public static void FadeIn(in FrameworkElement target, double duration = 280, EventHandler onFinish = null)
        {
            FadeOpacity(target, 1, duration, onFinish);
        }

        // Used for fading controls out of view
        public static void FadeOut(in FrameworkElement target, double duration = 280, EventHandler onFinish = null)
        {
            FadeOpacity(target, 0, duration, onFinish);
        }
    }
}
